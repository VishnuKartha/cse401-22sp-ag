	.text
	.globl _asm_main
_asm_main:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq %rdi,%rbx
	pushq %rdi
	movq $8,%rdi
	call _mjcalloc
	popq %rdi
	leaq TV$$(%rip),%rdx
	movq %rdx,0(%rax)
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $8,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	movq %rbp,%rsp
	popq %rbp
	ret 
TV$Start:
	pushq %rbp
	movq %rsp,%rbp
	subq $32,%rsp
	pushq %rdi
	movq $56,%rdi
	pushq %rax
	call _mjcalloc
	popq %rdx
	popq %rdi
	leaq Tree$$(%rip),%rdx
	movq %rdx,0(%rax)
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $16,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $8,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $152,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	movq $100000000,%rax
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $8,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $24,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $4,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $20,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $28,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $14,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $104,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $152,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	movq $100000000,%rax
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq $24,%rdi
	pushq %rax
	call _mjcalloc
	popq %rdx
	popq %rdi
	leaq MyVisitor$$(%rip),%rdx
	movq %rdx,0(%rax)
	movq %rax,-32(%rbp)
	movq $50000000,%rax
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -32(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $168,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	movq $100000000,%rax
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $24,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $144,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $144,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $16,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $144,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $50,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $144,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $144,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $112,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $152,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $144,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Init:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,-24(%rdi)
	movq $0,%rax
	movq %rax,-32(%rdi)
	movq $0,%rax
	movq %rax,-40(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetRight:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,-8(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetLeft:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,-8(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetRight:
	pushq %rbp
	movq %rsp,%rbp
	movq -8(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetLeft:
	pushq %rbp
	movq %rsp,%rbp
	movq -8(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetKey:
	pushq %rbp
	movq %rsp,%rbp
	movq -24(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetKey:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,-24(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetHas_Right:
	pushq %rbp
	movq %rsp,%rbp
	movq -40(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetHas_Left:
	pushq %rbp
	movq %rsp,%rbp
	movq -32(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetHas_Left:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,-32(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetHas_Right:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,-40(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Compare:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq $0,%rax
	movq %rax,-8(%rbp)
	movq 24(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-16(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq 24(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse1
	movq $1,%rax
	jmp done1
setLessFalse1:
	movq $0,%rax
done1:
	cmpq $1,%rax
	jne else1
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done2
else1:
	movq 16(%rbp),%rax
	pushq %rax
	movq -16(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse2
	movq $1,%rax
	jmp done3
setLessFalse2:
	movq $0,%rax
done3:
	cmpq $1,%rax
	je setNotFalse1
	movq $1,%rax
	jmp done4
setNotFalse1:
	movq $0,%rax
done4:
	cmpq $1,%rax
	jne else2
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done5
else2:
	movq $1,%rax
	movq %rax,-8(%rbp)
done5:
done2:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Insert:
	pushq %rbp
	movq %rsp,%rbp
	subq $40,%rsp
	pushq %rdi
	movq $56,%rdi
	pushq %rax
	call _mjcalloc
	popq %rdx
	popq %rdi
	leaq Tree$$(%rip),%rdx
	movq %rdx,0(%rax)
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $8,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rax,-32(%rbp)
while1:
	movq -32(%rbp),%rax
	cmpq $1,%rax
	jne done6
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-40(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq -40(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse3
	movq $1,%rax
	jmp done7
setLessFalse3:
	movq $0,%rax
done7:
	cmpq $1,%rax
	jne else3
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else4
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done8
else4:
	movq $0,%rax
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $1,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $80,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $24,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
done8:
	jmp done9
else3:
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else5
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done10
else5:
	movq $0,%rax
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $1,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $88,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $16,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
done10:
done9:
	jmp while1
done6:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Delete:
	pushq %rbp
	movq %rsp,%rbp
	subq $56,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rax,-24(%rbp)
	movq $0,%rax
	movq %rax,-32(%rbp)
	movq $1,%rax
	movq %rax,-48(%rbp)
while2:
	movq -24(%rbp),%rax
	cmpq $1,%rax
	jne done11
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-56(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq -56(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse4
	movq $1,%rax
	jmp done12
setLessFalse4:
	movq $0,%rax
done12:
	cmpq $1,%rax
	jne else6
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else7
	movq -8(%rbp),%rax
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done13
else7:
	movq $0,%rax
	movq %rax,-24(%rbp)
done13:
	jmp done14
else6:
	movq -56(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse5
	movq $1,%rax
	jmp done15
setLessFalse5:
	movq $0,%rax
done15:
	cmpq $1,%rax
	jne else8
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else9
	movq -8(%rbp),%rax
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done16
else9:
	movq $0,%rax
	movq %rax,-24(%rbp)
done16:
	jmp done17
else8:
	movq -48(%rbp),%rax
	cmpq $1,%rax
	jne else10
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	je setNotFalse2
	movq $1,%rax
	jmp done18
setNotFalse2:
	movq $0,%rax
done18:
	cmpq $1,%rax
	jne setAndFalse1
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	je setNotFalse3
	movq $1,%rax
	jmp done19
setNotFalse3:
	movq $0,%rax
done19:
	cmpq $1,%rax
	jne setAndFalse1
	movq $1,%rax
	jmp done20
setAndFalse1:
	movq $0,%rax
done20:
	cmpq $1,%rax
	jne else11
	movq $1,%rax
	movq %rax,-40(%rbp)
	jmp done21
else11:
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rax
	movq -8(%rbp),%rax
	pushq %rax
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $120,%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-40(%rbp)
done21:
	jmp done22
else10:
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rax
	movq -8(%rbp),%rax
	pushq %rax
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $120,%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-40(%rbp)
done22:
	movq $1,%rax
	movq %rax,-32(%rbp)
	movq $0,%rax
	movq %rax,-24(%rbp)
done17:
done14:
	movq $0,%rax
	movq %rax,-48(%rbp)
	jmp while2
done11:
	movq -32(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Remove:
	pushq %rbp
	movq %rsp,%rbp
	subq $24,%rsp
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else12
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rax
	movq 16(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $136,%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done23
else12:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else13
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rax
	movq 16(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $128,%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done24
else13:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdi
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rax
	movq -16(%rbp),%rax
	pushq %rax
	movq -24(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $96,%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else14
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $24,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $80,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done25
else14:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $16,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $88,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
done25:
done24:
done23:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$RemoveRight:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
while3:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne done26
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rbx
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,%rdi
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	addq $56,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq 16(%rbp),%rax
	movq %rax,16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,16(%rbp)
	jmp while3
done26:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $16,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $88,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$RemoveLeft:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
while4:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne done27
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rbx
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,%rdi
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	addq $56,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq 16(%rbp),%rax
	movq %rax,16(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,16(%rbp)
	jmp while4
done27:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $24,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	addq $80,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Search:
	pushq %rbp
	movq %rsp,%rbp
	subq $32,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rax,-24(%rbp)
	movq $0,%rax
	movq %rax,-16(%rbp)
while5:
	movq -24(%rbp),%rax
	cmpq $1,%rax
	jne done28
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-32(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse6
	movq $1,%rax
	jmp done29
setLessFalse6:
	movq $0,%rax
done29:
	cmpq $1,%rax
	jne else15
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else16
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done30
else16:
	movq $0,%rax
	movq %rax,-24(%rbp)
done30:
	jmp done31
else15:
	movq -32(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	popq %rdx
	cmpq %rdx,%rax
	jng setLessFalse7
	movq $1,%rax
	jmp done32
setLessFalse7:
	movq $0,%rax
done32:
	cmpq $1,%rax
	jne else17
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else18
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done33
else18:
	movq $0,%rax
	movq %rax,-24(%rbp)
done33:
	jmp done34
else17:
	movq $1,%rax
	movq %rax,-16(%rbp)
	movq $0,%rax
	movq %rax,-24(%rbp)
done34:
done31:
	jmp while5
done28:
	movq -16(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Print:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	addq $160,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$RecPrint:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else19
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	addq $160,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done35
else19:
	movq $1,%rax
	movq %rax,-8(%rbp)
done35:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else20
	pushq %rdi
	movq %rdi,%rbx
	movq %rdi,%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	addq $160,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done36
else20:
	movq $1,%rax
	movq %rax,-8(%rbp)
done36:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$accept:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	movq $333,%rax
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq %rdi,%rax
	pushq %rbx
	movq (%rdi),%rax
	addq $8,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Visitor$visit:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else21
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rdi)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rdi),%rax
	movq %rax,%rdi
	movq %rdi,%rax
	pushq %rbx
	movq (%rdi),%rax
	addq $168,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done37
else21:
	movq $0,%rax
	movq %rax,-8(%rbp)
done37:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else22
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rdi)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rdi),%rax
	movq %rax,%rdi
	movq %rdi,%rax
	pushq %rbx
	movq (%rdi),%rax
	addq $168,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done38
else22:
	movq $0,%rax
	movq %rax,-8(%rbp)
done38:
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
MyVisitor$visit:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $64,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else23
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $32,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rdi)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rdi),%rax
	movq %rax,%rdi
	movq %rdi,%rax
	pushq %rbx
	movq (%rdi),%rax
	addq $168,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done39
else23:
	movq $0,%rax
	movq %rax,-8(%rbp)
done39:
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $48,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _put
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $72,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $1,%rax
	jne else24
	pushq %rdi
	movq %rdi,%rbx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	addq $40,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rdi)
	pushq %rdi
	movq %rdi,%rbx
	movq -8(%rdi),%rax
	movq %rax,%rdi
	movq %rdi,%rax
	pushq %rbx
	movq (%rdi),%rax
	addq $168,%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done40
else24:
	movq $0,%rax
	movq %rax,-8(%rbp)
done40:
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
	.data
TreeVisitor$$: .quad 0
TV$$: .quad 0
		.quad TV$Start
Tree$$: .quad 0
		.quad Tree$Init
		.quad Tree$SetRight
		.quad Tree$SetLeft
		.quad Tree$GetRight
		.quad Tree$GetLeft
		.quad Tree$GetKey
		.quad Tree$SetKey
		.quad Tree$GetHas_Right
		.quad Tree$GetHas_Left
		.quad Tree$SetHas_Left
		.quad Tree$SetHas_Right
		.quad Tree$Compare
		.quad Tree$Insert
		.quad Tree$Delete
		.quad Tree$Remove
		.quad Tree$RemoveRight
		.quad Tree$RemoveLeft
		.quad Tree$Search
		.quad Tree$Print
		.quad Tree$RecPrint
		.quad Tree$accept
Visitor$$: .quad 0
		.quad Visitor$visit
MyVisitor$$: .quad Visitor$$
		.quad MyVisitor$visit
