/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp, ...
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* operators */
terminal PLUS, MINUS, TIMES, AND;
terminal BECOMES;
terminal NOT;
terminal PERIOD;
terminal LESS_THAN;

/* delimiters */
terminal LPAREN, RPAREN, SEMICOLON, COMMA;
terminal LBRACKET, RBRACKET;
terminal LBRACE, RBRACE;

/* identifiers */
terminal String IDENTIFIER;

/* types */
terminal String INT;
terminal String BOOLEAN;
terminal String INTEGER_LITERAL;

/* keywords */
terminal String TRUE, FALSE;
terminal String CLASS;
terminal String PUBLIC, STATIC, VOID, MAIN;
terminal String NEW;
terminal String IF, ELSE, WHILE;
terminal String SOUT;
terminal String THIS;
terminal String RETURN;
terminal String EXTENDS;
terminal String LENGTH;
terminal String STRING;

/* Nonterminals (constructed by parser): */
nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDeclList ClassDeclList;
//nonterminal ClassDeclSimple ClassDeclSimple;
//nonterminal ClassDeclExtends ClassDeclExtends;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal Formal Formal;
nonterminal FormalList FormalList;
nonterminal Type Type;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal Exp Exp;
nonterminal ExpList ExpList;
nonterminal Identifier Identifier;

/* Precedence declarations: */
precedence left AND;
precedence left NOT;
precedence left LESS_THAN;
precedence left PLUS,MINUS;
precedence left TIMES;
precedence nonassoc PERIOD;
precedence nonassoc IDENTIFIER;
precedence nonassoc LBRACKET;

/* Productions: */
Program ::= MainClass:mc ClassDeclList:cd
        {: RESULT = new Program(mc, cd, mcxleft); :};

MainClass  ::= CLASS Identifier:id1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET
              	      RBRACKET Identifier:id2 RPAREN LBRACE Statement:s RBRACE RBRACE
                {: RESULT =  new MainClass(id1, id2, s, id1xleft); :};
ClassDecl ::= CLASS Identifier:i1 EXTENDS Identifier:i2 LBRACE VarDeclList:v_list MethodDeclList:md_list RBRACE
            {: RESULT =  new ClassDeclExtends(i1,i2,v_list,md_list, i1xleft); :}
          | CLASS Identifier:i1  LBRACE VarDeclList:v_list MethodDeclList:md_list RBRACE
                        {: RESULT =  new ClassDeclSimple(i1,v_list,md_list, i1xleft); :};
ClassDeclList ::= ClassDeclList: cd_list ClassDecl: c
                           {: cd_list.add(c);
                              RESULT = cd_list; :}
                           |
                           {: RESULT = new ClassDeclList(new Location(-1, -1)); :};

MethodDecl ::= PUBLIC Type:t Identifier:i LPAREN FormalList:f_list RPAREN LBRACE VarDeclList:
                    v_list StatementList:s_list RETURN Exp:e SEMICOLON RBRACE
                  {:RESULT = new MethodDecl(t,i,f_list,v_list,s_list,e,txleft); :}
                  |PUBLIC Type:t Identifier:i LPAREN RPAREN LBRACE VarDeclList:
                        v_list StatementList:s_list RETURN Exp:e SEMICOLON RBRACE
                            {:RESULT = new MethodDecl(t,i,new FormalList(txleft),v_list,s_list,e,txleft); :};

MethodDeclList ::= MethodDeclList: md_list MethodDecl: m
         {: md_list.add(m);
            RESULT = md_list; :}
         |
         {: RESULT = new MethodDeclList(new Location(-1, -1)); :};

VarDecl ::= Type:t Identifier:i SEMICOLON
       {: RESULT = new VarDecl(t, i,  txleft); :};
VarDeclList ::= VarDeclList: vd_list VarDecl: v
         {: vd_list.add(v);
            RESULT = vd_list; :}
        | {: RESULT = new VarDeclList(new Location(-1, -1)); :};
Formal ::= Type:t Identifier:i
        {: RESULT = new Formal(t, i, txleft); :};
FormalList ::= Formal:f1
          {: FormalList fl = new FormalList(f1xleft);
                fl.add(f1);
                 RESULT = fl; :}
        | FormalList: f_list COMMA Formal: f
         {: f_list.add(f);
            RESULT = f_list; :};

Type ::= INT:i LBRACKET RBRACKET
            {: RESULT = new IntArrayType(ixleft); :}
        | BOOLEAN:b
            {: RESULT = new BooleanType(bxleft); :}
        | INT:i
            {: RESULT = new IntegerType(ixleft); :}
        | IDENTIFIER:i
            {: RESULT = new IdentifierType(i, ixleft); :};

Statement ::= LBRACE StatementList:s RBRACE
    {: RESULT = new Block(s, sxleft); :}
    |IF LPAREN Exp:e RPAREN Statement:s1 ELSE Statement:s2
        {: RESULT = new If(e, s1, s2,exleft); :}
    |SOUT LPAREN Exp:e RPAREN SEMICOLON
        {: RESULT = new Print(e, exleft); :}
    | WHILE LPAREN Exp:e RPAREN Statement:s
         {: RESULT = new While(e, s, exleft); :}
    | Identifier:i BECOMES Exp:e SEMICOLON
        {: RESULT = new Assign(i, e, ixleft); :}
    | Identifier:i LBRACKET Exp:e1 RBRACKET BECOMES Exp:e2 SEMICOLON
        {: RESULT = new ArrayAssign(i, e1, e2, ixleft); :};

StatementList ::= Statement:s StatementList:state_list
    {: state_list.add(s);
        RESULT = state_list; :}
        | {:RESULT = new StatementList(new Location(-1, -1)); :};

Exp ::= Exp: e1 AND Exp: e2
            {: RESULT = new And(e1, e2, e1xleft); :}
        | Exp:e1 LESS_THAN Exp:e2
            {: RESULT = new LessThan(e1, e2, e1xleft); :}
        | Exp:e1 PLUS Exp:e2
                    {: RESULT = new Plus(e1,  e2, e1xleft); :}
        | Exp:e1 MINUS Exp:e2
                    {: RESULT = new Minus(e1, e2, e1xleft); :}
        | Exp:e1 TIMES Exp:e2
                    {: RESULT = new Times(e1, e2, e1xleft); :}
        | Exp:e1 LBRACKET Exp:e2 RBRACKET
            {: RESULT = new ArrayLookup(e1, e2, e1xleft); :}
        | Exp:e1 PERIOD LENGTH
            {: RESULT = new ArrayLength(e1, e1xleft); :}
        | Exp:e1 PERIOD Identifier:id LPAREN ExpList:expl RPAREN
            {: RESULT = new Call(e1, id, expl,e1xleft); :}
        | Exp:e1 PERIOD Identifier:id LPAREN RPAREN
            {: RESULT = new Call(e1, id,new ExpList(e1xleft),e1xleft); :}
        | INTEGER_LITERAL: i
            {: RESULT = new IntegerLiteral(Integer.parseInt(i), ixleft) ; :}
        | TRUE: t
            {: RESULT = new True(txleft) ; :}
        | FALSE: f
            {: RESULT = new False(fxleft) ; :}
        | IDENTIFIER: i
            {: RESULT = new IdentifierExp(i,ixleft) ; :}
        | THIS: t
            {: RESULT = new This(txleft) ; :}
        | NEW INT LBRACKET Exp:e RBRACKET
            {: RESULT = new NewArray(e, exleft); :}
        | NEW Identifier:i LPAREN RPAREN
            {: RESULT = new NewObject(i, ixleft); :}
        | NOT Exp:e
            {: RESULT = new Not(e, exleft); :}
        | LPAREN Exp:e RPAREN
            {: RESULT = e; :};
ExpList ::= Exp:e1
          {: ExpList el = new ExpList(e1xleft);
            el.add(e1);
          RESULT = el;:}
        | ExpList: exp_list COMMA Exp: e
         {: exp_list.add(e);
            RESULT = exp_list; :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};
