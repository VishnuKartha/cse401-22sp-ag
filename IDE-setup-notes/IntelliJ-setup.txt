Staff 9/18, 9/19; HP 4/20; AS 4/21, HP 10/21

These are instructions for setting up the CSE 401/M501 project with
IntelliJ.  Although they have been verified to work with most setups
and IntelliJ versions, things can change and it is possible you will
find problems along the way.  Please report any issues you discover to
cse401-staff@cs.washington.edu so the course staff can update these
instructions for future quarters.  The course discussion group is also
a good place to exchange experiences and ideas with others.

21sp: These instructions have been updated and verified with the
following IntelliJ version on Windows: Version: 2020.3.3, Build:
203.7717.56, 15 March 2021.  They should work for most recent versions
of IntelliJ on any platform, but if you have problems, please use the
class discussion board to report issues and help each other find
solutions.

Two versions of the IntelliJ IDE are available: a free community one and
a licensed Ultimate version.  They should work equally well for CSE
401/M501 projects, but since educational users can obtain a free license
for the Ultimate one, most students have used that in recent quarters
and that is the version installed in the CSE undergrad labs.


0. Clone your project team's GitLab repository into some convenient
location.  Initially it will contain the starter code for the project,
which you will modify and add to during the quarter.  Do this outside
of IntelliJ - do not create a new IntelliJ project directly from the
GitLab repo.

1. BEFORE you start IntelliJ, open a command window, navigate to the
root folder of your cloned repository, and enter 'ant' (without the
quotes).  This should build the sample scanner and parser and compile
all of the Java files.  If this step doesn't work, fix it before
continuing.

If you do not have ant on your system, you may be able to install it
with whatever package manager is available locally.  Or you can go to
https://ant.apache.org/ and get it from there.  It is true that
recent versions of IntelliJ include ant, but this build step should
be done before creating a new project for MiniJava inside IntelliJ.

2. Start IntelliJ and create a new project for MiniJava as follows.

a) WAIT: did you do the ant build in step 1, above?  If not, quit
IntelliJ and do that first.

b) From the IntelliJ starting screen, select "Open", then browse to
the MiniJava project folder root and select "Open".

c) A notification may pop up on the lower right saying "Ant build
scripts found."  Click "Add Ant build file." A window titled "Trust
Ant Project?" may pop up, click "Trust Project." The Ant toolbar
should pop up on the right, listing the build file "minijava" and
targets (e.g. "demo-scanner") below it.

ci) IF the above doesn't work, you can open the Ant toolbar using
View>Tool Windows>Ant. To add the Ant build file, click the plus icon
in the upper left. Select "build.xml" in the root of the MiniJava
project directory, and you should see a list of ant tasks appear.  As
an alternative to this step, you may find it effective to simply use
IntelliJ as an editor and run all ant tasks from the command line.

d) Go to File>Project Structure>Project. The Project SDK should be 11 or
newer. If you don't have that option, make sure you have Java 11
installed (people have reported issues when setting up this project with
ancient versions of Java, particularly versions older than Java 8). Then
be sure to set the Project Language Level to 11 so that IntelliJ will
flag any newer, incompatible language or library features. The course
staff will test your compiler using Java 11, so you should be sure your
project code does will work with that compiler.

PLEASE NOTE: For many people, IntelliJ shows the progress of the ant
task on the bottom bar but doesn't seem to produce any output.  If this
happens, select View>Tool Windows>Messages to view the result of the
most recently run ant task.

4. If you feel compelled to start tinkering with classpaths or other
IntelliJ options, please post a message to the class discussion board
describing the apparent problem and what you did to fix it.  That will
help all of us figure out how to get IntelliJ's internal build
machinery to play nice with the project.

One last (general) suggestion: If it seems that changes to your source
files are not properly reflected in your project, it may be that some
.class files or tool-generated (JFlex and CUP) files are out of date or
weren't recompiled when they should have been.  (Shouldn't be possible,
but it seems to happen occasionally.)  If you suspect this to be the
case, quit IntelliJ if it is running, open a command window, navigate to
the MiniJava folder, then enter 'ant clean' followed by 'ant' to
recompile everything. If the problem persists, check to be sure you
haven't added or pushed any of the generated files to your GitLab
repository.
